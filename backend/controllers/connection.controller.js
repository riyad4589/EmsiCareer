import ConnectionRequest from "../models/connectionRequest.model.js";
import Notification from "../models/notification.model.js";
import User from "../models/user.model.js";
import Connection from "../models/connection.model.js";

export const sendConnectionRequest = async (req, res) => {
	try {
		const { userId } = req.params;
		const senderId = req.user._id.toString();

		console.log("=== üì§ Envoi de demande de connexion ===");
		console.log("Demande de :", senderId, " ‚Üí ", userId);

		// 1. V√©rifier que le destinataire existe
		const recipient = await User.findById(userId);
		if (!recipient) {
			return res.status(404).json({
				success: false,
				message: "Utilisateur destinataire introuvable",
			});
		}

		// 2. Interdire l'auto-demande
		if (senderId === userId) {
			return res.status(400).json({
				success: false,
				message: "Vous ne pouvez pas vous connecter avec vous-m√™me",
			});
		}

		// 3. V√©rifier si une connexion accept√©e existe d√©j√†
		const existingConnection = await Connection.findOne({
			$or: [
				{ user1: senderId, user2: userId },
				{ user1: userId, user2: senderId },
			],
			status: "accepted",
		});

		if (existingConnection) {
			return res.status(400).json({
				success: false,
				message: "Vous √™tes d√©j√† connect√© √† cet utilisateur",
			});
		}

		// // 4. V√©rifier s'il existe une demande en attente entre ces deux utilisateurs
		const existingRequest = await ConnectionRequest.findOne({
		 	$or: [
		 		{ sender: senderId, recipient: userId },
		 		{ sender: userId, recipient: senderId },
		 	],
		 	status: "pending",
		 });

		 if (existingRequest) {
		 	return res.status(400).json({
		 		success: false,
				message: "Une demande de connexion est d√©j√† en attente entre vous deux",
			});
		 }

		// 5. Cr√©er la demande de connexion
		const connectionRequest = await ConnectionRequest.create({
			sender: senderId,
			recipient: userId,
			status: "pending",
		});

		// 6. Cr√©er une notification
		await Notification.create({
			sender: senderId,
			recipient: userId,
			type: "connection_request",
			message: `${req.user.name} vous a envoy√© une demande de connexion`,
		});

		// 7. √âmettre un √©v√©nement socket.io au destinataire
		const io = req.app.get("io");
		if (io) {
			io.to(userId).emit("newConnectionRequest", {
				senderId,
				recipientId: userId,
				request: connectionRequest,
			});
		}

		console.log("‚úÖ Demande et notification enregistr√©es");

		return res.status(201).json({
			success: true,
			message: "Demande de connexion envoy√©e",
			data: connectionRequest,
		});
	} catch (error) {
		console.error("‚ùå ERREUR dans sendConnectionRequest:", error);
		return res.status(500).json({
			success: false,
			message: "Erreur interne lors de la demande de connexion",
			details: error.message,
		});
	}
};


export const acceptConnectionRequest = async (req, res) => {
	try {
		const requestId = req.params.requestId;
		const userId = req.user._id.toString();

		// 1. Trouver la demande
		const request = await ConnectionRequest.findById(requestId);
		if (!request) {
			return res.status(404).json({
				success: false,
				message: "Demande de connexion non trouv√©e",
			});
		}

		// 2. V√©rifier l'autorisation
		if (request.recipient.toString() !== userId) {
			return res.status(403).json({
				success: false,
				message: "Vous n'√™tes pas autoris√© √† accepter cette demande",
			});
		}

		const senderId = request.sender.toString();
		let created = false;

		// 3. V√©rifier si la connexion existe d√©j√†
		const existingConnection = await Connection.findOne({
			$or: [
				{ user1: senderId, user2: userId },
				{ user1: userId, user2: senderId },
			],
			status: "accepted",
		});

		if (!existingConnection) {
			// 4. Cr√©er la connexion
			await Connection.create({
				user1: senderId,
				user2: userId,
				status: "accepted",
			});
			created = true;
			console.log("‚úÖ Connexion cr√©√©e entre", senderId, "et", userId);
		} else {
			console.log("‚ÑπÔ∏è Connexion d√©j√† existante");
		}

		// 5. Supprimer la demande accept√©e
		await request.deleteOne();
		console.log("üóëÔ∏è Demande supprim√©e :", request._id);

		// 6. Supprimer toute autre demande miroir (inverse)
		await ConnectionRequest.deleteMany({
			sender: userId,
			recipient: senderId,
			status: "pending"
		});

		// 7. Notification √† l'exp√©diteur
		await Notification.create({
			sender: userId,
			recipient: senderId,
			type: "connection_accepted",
			message: `${req.user.name} a accept√© votre demande de connexion`,
		});

		// 8. R√©ponse
		return res.status(200).json({
			success: true,
			message: created
				? "Connexion accept√©e avec succ√®s"
				: "Connexion d√©j√† existante, mais la demande a √©t√© nettoy√©e",
		});
	} catch (error) {
		console.error("‚ùå Erreur dans acceptConnectionRequest:", error);
		return res.status(500).json({
			success: false,
			message: "Erreur lors de l'acceptation de la demande",
			error: error.message
		});
	}
};


export const rejectConnectionRequest = async (req, res) => {
	try {
		const { requestId } = req.params;
		const userId = req.user._id.toString();

		console.log("üìõ Rejet de la demande de connexion:", requestId);

		// 1. Trouver la demande
		const request = await ConnectionRequest.findById(requestId);
		if (!request) {
			return res.status(404).json({
				success: false,
				message: "Demande de connexion non trouv√©e",
			});
		}

		// 2. V√©rifier l'autorisation
		if (request.recipient.toString() !== userId) {
			return res.status(403).json({
				success: false,
				message: "Vous n'√™tes pas autoris√© √† rejeter cette demande",
			});
		}

		// 3. V√©rifier que la demande est encore valide
		if (request.status !== "pending") {
			return res.status(400).json({
				success: false,
				message: "Cette demande n'est plus active",
			});
		}

		// 4. Supprimer uniquement la demande rejet√©e
		await request.deleteOne();

		// 5. Supprimer notification de type "connection_request" si existante
		await Notification.deleteMany({
			sender: request.sender,
			recipient: userId,
			type: "connection_request"
		});

		// 6. Cr√©er une nouvelle notification de rejet
		await Notification.create({
			sender: userId,
			recipient: request.sender,
			type: "connection_rejected",
			message: `${req.user.name} a rejet√© votre demande de connexion`,
		});

		return res.json({
			success: true,
			message: "Demande de connexion rejet√©e avec succ√®s",
		});
	} catch (error) {
		console.error("‚ùå Erreur dans rejectConnectionRequest:", error);
		return res.status(500).json({
			success: false,
			message: "Erreur interne lors du rejet de la demande",
			details: error.message,
		});
	}
};


export const getConnectionRequests = async (req, res) => {
	try {
		const userId = req.user._id;

		console.log("üì• R√©cup√©ration des demandes de connexion pour :", userId);

		const requests = await ConnectionRequest.find({
			recipient: userId,
			status: "pending"
		})
		.populate("sender", "name profilePicture headline")
		.sort({ createdAt: -1 });

		console.log(`‚úÖ ${requests.length} demande(s) trouv√©e(s)`);

		res.status(200).json({
			success: true,
			message: "Demandes de connexion r√©cup√©r√©es avec succ√®s",
			data: requests
		});
	} catch (error) {
		console.error("‚ùå Erreur lors de la r√©cup√©ration des demandes:", error);
		res.status(500).json({
			success: false,
			message: "Erreur lors de la r√©cup√©ration des demandes de connexion",
			details: error.message
		});
	}
};


export const getUserConnections = async (req, res) => {
	try {
		const userId = req.user._id.toString();
		console.log("üîó R√©cup√©ration des connexions pour :", userId);

		// 1. R√©cup√©rer toutes les connexions accept√©es li√©es √† l'utilisateur
		const connections = await Connection.find({
			$or: [
				{ user1: userId, status: "accepted" },
				{ user2: userId, status: "accepted" }
			]
		})
		.populate("user1", "name username profilePicture headline")
		.populate("user2", "name username profilePicture headline")
		.lean();

		console.log(`‚úÖ ${connections.length} connexion(s) trouv√©e(s)`);

		// 2. Extraire l'autre utilisateur de chaque relation
		const connectedUsers = connections.map(connection => {
			const isUser1 = connection.user1._id.toString() === userId;
			const other = isUser1 ? connection.user2 : connection.user1;

			return {
				_id: other._id,
				name: other.name,
				username: other.username,
				profilePicture: other.profilePicture,
				headline: other.headline
			};
		});

		return res.status(200).json({
			success: true,
			message: "Connexions r√©cup√©r√©es avec succ√®s",
			total: connectedUsers.length,
			data: connectedUsers
		});
	} catch (error) {
		console.error("‚ùå Erreur dans getUserConnections:", error);
		return res.status(500).json({
			success: false,
			message: "Erreur lors de la r√©cup√©ration des connexions",
			error: error.message
		});
	}
};


export const removeConnection = async (req, res) => {
	try {
		const myId = req.user._id.toString();
		const { userId } = req.params;

		console.log("üîÅ Suppression de connexion entre", myId, "et", userId);

		// 1. V√©rifier si une connexion existe
		const connection = await Connection.findOne({
			$or: [
				{ user1: myId, user2: userId },
				{ user1: userId, user2: myId }
			]
		}).lean();

		if (!connection) {
			console.warn("‚ö†Ô∏è Aucune connexion existante entre les deux utilisateurs");
			return res.status(404).json({
				success: false,
				message: "Aucune connexion trouv√©e entre ces utilisateurs"
			});
		}

		// 2. Supprimer la connexion
		await Connection.deleteOne({ _id: connection._id });
		console.log("‚úÖ Connexion supprim√©e :", connection._id);

		// 3. Cr√©er une notification pour l'autre utilisateur
		await Notification.create({
			sender: myId,
			recipient: userId,
			type: "connection_removed",
			message: `${req.user.name} a supprim√© la connexion avec vous`,
		});

		return res.json({
			success: true,
			message: "Connexion supprim√©e avec succ√®s"
		});
	} catch (error) {
		console.error("‚ùå Erreur lors de la suppression de la connexion :", error);
		return res.status(500).json({
			success: false,
			message: "Erreur lors de la suppression de la connexion",
			error: error.message
		});
	}
};


export const getConnectionStatus = async (req, res) => {
	try {
		const currentUserId = req.user._id.toString();
		const otherUserId = req.params.userId.toString();

		console.log("üîç V√©rification du statut de connexion :", {
			currentUserId,
			otherUserId
		});

		// Chercher une connexion accept√©e
		const connection = await Connection.findOne({
			$or: [
				{ user1: currentUserId, user2: otherUserId },
				{ user1: otherUserId, user2: currentUserId }
			],
			status: "accepted"
		}).lean();

		if (!connection) {
			console.log("‚ùå Aucune connexion trouv√©e");
			return res.status(200).json({
				success: true,
				status: "not_connected",
				message: "Aucune connexion n'existe entre ces deux utilisateurs"
			});
		}

		console.log("‚úÖ Connexion trouv√©e :", connection._id);

		return res.status(200).json({
			success: true,
			status: "accepted",
			message: "Les utilisateurs sont connect√©s",
			connection
		});
	} catch (error) {
		console.error("‚ùå Erreur dans getConnectionStatus :", error);
		return res.status(500).json({
			success: false,
			message: "Erreur lors de la v√©rification du statut de connexion",
			error: error.message
		});
	}
};


export const getFriends = async (req, res) => {
	try {
		const userId = req.user._id.toString();
		console.log("üì• R√©cup√©ration des amis pour :", userId);

		// Requ√™te pour les connexions accept√©es
		const connections = await Connection.find({
			$or: [
				{ user1: userId, status: "accepted" },
				{ user2: userId, status: "accepted" }
			]
		})
		.populate("user1", "name username profilePicture headline")
		.populate("user2", "name username profilePicture headline")
		.lean(); // lean global uniquement apr√®s populate

		console.log(`üîó ${connections.length} connexion(s) accept√©e(s) trouv√©e(s)`);

		// Identifier l'ami dans chaque relation
		const friends = connections.map(conn => {
			const isUser1 = conn.user1._id.toString() === userId;
			const friend = isUser1 ? conn.user2 : conn.user1;

			return {
				_id: friend._id,
				name: friend.name,
				username: friend.username,
				profilePicture: friend.profilePicture,
				headline: friend.headline
			};
		});

		console.log(`üë• ${friends.length} ami(s) trouv√©(s)`);

		return res.status(200).json({
			success: true,
			message: "Liste des amis r√©cup√©r√©e avec succ√®s",
			data: friends
		});
	} catch (error) {
		console.error("‚ùå Erreur dans getFriends:", error);
		return res.status(500).json({
			success: false,
			message: "Erreur lors de la r√©cup√©ration des amis",
			error: error.message
		});
	}
};

export const checkConnection = async (req, res) => {
	try {
		const currentUserId = req.user._id.toString();
		const otherUserId = req.params.userId.toString();

		console.log("üîç V√©rification de la connexion entre :", {
			user1: currentUserId,
			user2: otherUserId
		});

		// Chercher la connexion dans les deux sens
		const connection = await Connection.findOne({
			$or: [
				{ user1: currentUserId, user2: otherUserId },
				{ user1: otherUserId, user2: currentUserId }
			]
		}).lean();

		if (!connection) {
			console.log("‚ùå Pas de connexion trouv√©e");
			return res.status(200).json({
				success: true,
				exists: false,
				status: null,
				message: "Aucune connexion n'existe entre ces utilisateurs"
			});
		}

		console.log("‚úÖ Connexion trouv√©e avec statut :", connection.status);

		return res.status(200).json({
			success: true,
			exists: true,
			status: connection.status,
			connection,
			message: `Connexion ${connection.status}`
		});
	} catch (error) {
		console.error("‚ùå Erreur dans checkConnection :", error);
		return res.status(500).json({
			success: false,
			message: "Erreur lors de la v√©rification de la connexion",
			error: error.message
		});
	}
};


// R√©cup√©rer les connexions d'un utilisateur sp√©cifique (pour l'administration)
export const getUserConnectionsById = async (req, res) => {
	try {
		const userId = req.params.userId.toString();

		console.log("üîç R√©cup√©ration des connexions pour l'utilisateur admin :", userId);

		const connections = await Connection.find({
			$or: [
				{ user1: userId, status: "accepted" },
				{ user2: userId, status: "accepted" }
			]
		})
		.populate("user1", "name username profilePicture headline")
		.populate("user2", "name username profilePicture headline")
		.lean(); // ‚Üê placer lean global ici uniquement

		console.log(`üîó ${connections.length} connexion(s) trouv√©e(s)`);

		const connectedUsers = connections.map(connection => {
			const isUser1 = connection.user1._id.toString() === userId;
			const user = isUser1 ? connection.user2 : connection.user1;

			return {
				_id: user._id,
				name: user.name,
				username: user.username,
				profilePicture: user.profilePicture,
				headline: user.headline
			};
		});

		return res.status(200).json({
			success: true,
			message: "Connexions r√©cup√©r√©es avec succ√®s",
			total: connectedUsers.length,
			data: connectedUsers
		});
	} catch (error) {
		console.error("‚ùå Erreur dans getUserConnectionsById :", error);
		return res.status(500).json({
			success: false,
			message: "Erreur lors de la r√©cup√©ration des connexions",
			error: error.message
		});
	}
};

